{"version":3,"sources":["components/Cards/Cards.module.css","api/index.js","components/Cards/Cards.jsx","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","url","fetchData","country","a","changeableUrl","axios","get","data","confirmed","recovered","deaths","lastUpdate","fetchCountries","countries","map","name","fetchDailyData","date","reportDate","total","Cards","Grid","container","spacing","justify","item","xs","md","component","Card","className","cx","styles","card","CardContent","infected","Typography","start","end","value","duration","separator","color","Date","toDateString","variant","Chart","useState","dailyData","setDailyData","useEffect","initialDailyData","fetchMyAPI","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","length","borderColor","fill","CountryPicker","handleCountryChange","fetchedCountries","setFetchCountries","fetchAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","event","target","index","key","App","state","fetchedData","setState","this","subTitle","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1651e60a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__33TUo\",\"card\":\"Cards_card__3xu-u\",\"infected\":\"Cards_infected__2vXKr\",\"recovered\":\"Cards_recovered__3hBan\",\"deaths\":\"Cards_deaths__20Jt-\"};","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(changeableUrl);\r\n\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url}/countries`);\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n\r\n    return data.map(({ confirmed, deaths, reportDate: date }) => ({\r\n      confirmed: confirmed.total,\r\n      deaths: deaths.total,\r\n      date,\r\n    }));\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\n\r\nimport styles from \"./Cards.module.css\";\r\nimport cx from \"classnames\";\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n  if (!confirmed) {\r\n    return \"Loading...\";\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid item xs={12} md={3} component={Card} className={cx(styles.card)}>\r\n          <CardContent>\r\n            <p className={styles.infected}>Infected</p>\r\n\r\n            <Typography>\r\n              <CountUp\r\n                start={0}\r\n                end={confirmed.value}\r\n                duration={2.75}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\" component=\"p\">\r\n              Number of active cases of COVID-19.\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item xs={12} md={3} component={Card} className={cx(styles.card)}>\r\n          <CardContent>\r\n            <p className={styles.recovered}>recovered</p>\r\n            <Typography>\r\n              <CountUp\r\n                start={0}\r\n                end={recovered.value}\r\n                duration={2.75}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\" component=\"p\">\r\n              Number of recoveries from COVID-19.\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item xs={12} md={3} component={Card} className={cx(styles.card)}>\r\n          <CardContent>\r\n            <p className={styles.deaths}>Deaths</p>\r\n            <Typography>\r\n              <CountUp\r\n                start={0}\r\n                end={deaths.value}\r\n                duration={2.75}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\" component=\"p\">\r\n              Number of deaths caused by COVID-19.\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\n\r\nimport { fetchDailyData } from \"../../api\";\r\n\r\nimport styles from \"./Chart.module.css\";\r\n\r\nconst Chart = ({ data: { confirmed, deaths, recovered }, country }) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchMyAPI = async () => {\r\n      const initialDailyData = await fetchDailyData();\r\n\r\n      setDailyData(initialDailyData);\r\n    };\r\n\r\n    fetchMyAPI();\r\n  }, []);\r\n\r\n  const barChart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255, 0, 0, 0.5)\",\r\n            ],\r\n            data: [confirmed.value, recovered.value, deaths.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current state in ${country}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  const lineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map((data) => data.confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map((data) => data.deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255, 0, 0, 0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  return (\r\n    <div className={styles.container}>{country ? barChart : lineChart}</div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport styles from \"./CountryPicker.module.css\";\r\nimport { fetchCountries } from \"../../api/\";\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n  const [fetchedCountries, setFetchCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setFetchCountries(await fetchCountries());\r\n    };\r\n    fetchAPI();\r\n  }, [setFetchCountries]);\r\n\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect\r\n        defaultValue=\"\"\r\n        onChange={(event) => handleCountryChange(event.target.value)}\r\n      >\r\n        <option value=\"\">Global</option>\r\n        {fetchedCountries.map((country, index) => (\r\n          <option key={index} value={country}>\r\n            {country}\r\n          </option>\r\n        ))}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React from \"react\";\nimport { fetchData } from \"./api/index\";\nimport { Cards, CountryPicker, Chart } from \"./components\";\nimport styles from \"./App.module.css\";\n\nclass App extends React.Component {\n  state = {\n    data: {},\n  };\n\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n\n    this.setState({\n      data: fetchedData,\n    });\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    this.setState({\n      data: fetchedData,\n      country: country,\n    });\n  };\n\n  render() {\n    const { data, country } = this.state;\n    return (\n      <div className={styles.container}>\n        <h1 className={styles.title}>COVI-STAT</h1>\n        <h7 className={styles.subTitle}>CORONA VIRUS STATISTICS TRACKER</h7>\n        <Cards data={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Chart data={data} country={country} />\n\n        <footer>\n          Disclaimer: Daily statistics obtained from the Covid 19 MathDro API\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3x6oK\",\"title\":\"App_title__4LzOL\",\"subTitle\":\"App_subTitle__p52aE\",\"image\":\"App_image__3Lwna\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__3oVcR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1MVJV\"};"],"sourceRoot":""}